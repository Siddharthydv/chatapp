// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users{
  id        Int      @id @default(autoincrement())  
  username  String   @unique 
  password  String  
  email     String   @unique
  createdAt DateTime @default(now())
  token     String?   
  picurl    String?
  Status    String?
  friendRequestsSent     FriendRequest[]    @relation("SentFriendRequests")
  friendRequestsReceived FriendRequest[]    @relation("ReceivedFriendRequests")
  friendshipsInitiated   Friendship[]       @relation("UserFriendInitiated")
  friendshipsReceived    Friendship[]       @relation("UserFriendReceived")
  Sender                 Message[]          @relation("messagesender")
  Receiver               Message[]          @relation("messagereceiver")
  groups       GroupMember[] // One user can belong to multiple groups
  createdGroups Groups[]      @relation("CreatedGroups") // Groups created by the user
   messages     groupmessages[] 
}

model Friendship{
  id        Int    @id @default(autoincrement())
  user_id1   Int  
  user_id2   Int
  createdAt DateTime @default(now())

  user1         Users     @relation("UserFriendInitiated", fields: [user_id1], references: [id],onDelete:Cascade)
  user2         Users     @relation("UserFriendReceived", fields: [user_id2], references: [id],onDelete:Cascade)

  @@unique([user_id1, user_id2])
}


model FriendRequest {
  id              Int      @id @default(autoincrement())
  requester_id    Int
  requestee_id    Int
  status          String   @default("pending") @db.VarChar(20)
  created_at      DateTime @default(now())
  
 
  requester       Users     @relation("SentFriendRequests", fields: [requester_id], references: [id],onDelete:Cascade)
  requestee       Users     @relation("ReceivedFriendRequests", fields: [requestee_id], references: [id],onDelete:Cascade)

  @@unique([requester_id, requestee_id])
  @@index([requester_id, requestee_id])
}
model Message {
  id         Int       @id @default(autoincrement())
  content    String
  senderId   Int
  recipientUserId  Int? // Nullable if message is sent to a single user
  createdAt DateTime  @default(now())

  sender         Users     @relation("messagesender",fields: [senderId], references: [id], onDelete: Cascade)
  recipientUser  Users?     @relation("messagereceiver",fields: [recipientUserId], references: [id], onDelete: Cascade)
}

model Groups{
  id          Int           @id @default(autoincrement())
  name        String
  createdById Int
  createdBy   Users          @relation("CreatedGroups", fields: [createdById], references: [id])
  createdAt   DateTime      @default(now())
  members     GroupMember[] // One group can have multiple members
  messages    groupmessages[]  

 
}

model GroupMember {
  groupId  Int
  userId   Int
  joinedAt DateTime  @default(now())

  group    Groups @relation(fields: [groupId], references: [id],onDelete: Cascade)
  user     Users  @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@id([groupId, userId]) // Composite primary key
}

model groupmessages {
  id        Int      @id @default(autoincrement())
  content   String
  timestamp DateTime @default(now())
  userId    Int
  groupId   Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Groups   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}