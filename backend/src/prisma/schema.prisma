// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users{
  id        Int      @id @default(autoincrement())  
  username  String   @unique 
  password  String  
  email     String   @unique
  createdAt DateTime @default(now())
  token     String?   
  friendRequestsSent    FriendRequest[] @relation("SentFriendRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedFriendRequests")
   friendshipsInitiated  Friendship[]     @relation("UserFriendInitiated")
  friendshipsReceived   Friendship[]     @relation("UserFriendReceived")
}

model Friendship{
  id        Int    @id @default(autoincrement())
  user_id1   Int  
  user_id2   Int
  createdAt DateTime @default(now())

  user1         Users     @relation("UserFriendInitiated", fields: [user_id1], references: [id])
  user2         Users     @relation("UserFriendReceived", fields: [user_id2], references: [id])

  @@unique([user_id1, user_id2])
}


model FriendRequest {
  id              Int      @id @default(autoincrement())
  requester_id    Int
  requestee_id    Int
  status          String   @default("pending") @db.VarChar(20)
  created_at      DateTime @default(now())
  
 
  requester       Users     @relation("SentFriendRequests", fields: [requester_id], references: [id])
  requestee       Users     @relation("ReceivedFriendRequests", fields: [requestee_id], references: [id])

  @@unique([requester_id, requestee_id])
  @@index([requester_id, requestee_id])
}
